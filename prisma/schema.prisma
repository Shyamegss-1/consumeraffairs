generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  aid      Int    @id @default(autoincrement())
  username String @db.VarChar(200)
  email    String @db.VarChar(50)
  password String @db.VarChar(200)
  role     Int
  status   Int
}

model blog {
  b_id             Int     @id @default(autoincrement())
  b_title          String  @db.Text
  b_slug           String  @db.Text
  b_image          String  @db.VarChar(255)
  tags             String? @db.Text
  b_description    String  @db.Text
  b_category       String  @db.VarChar(255)
  listing_category Int?
  image_alt        String? @db.VarChar(255)
  date             String  @db.VarChar(255)
  b_status         Int
}

model blog_category {
  b_c_id         Int    @id @default(autoincrement())
  b_c_name       String @db.VarChar(255)
  bcategory_slug String @db.VarChar(255)
  date           String @db.VarChar(255)
  b__c_status    Int
}

model blog_comment {
  id      Int    @id @default(autoincrement())
  blog_id Int
  user_id Int    @default(0)
  name    String @db.VarChar(255)
  email   String @db.VarChar(255)
  comment String @db.Text
  date    String @db.VarChar(50)
  status  Int
}

model category {
  cid           Int       @id @default(autoincrement())
  category_name String    @db.VarChar(200)
  category_slug String    @db.VarChar(200)
  category_icon String?   @db.VarChar(255)
  popular       Int?      @default(0)
  date          String    @db.VarChar(20)
  status        Int
  listing       listing[]
}

model faq {
  id        Int    @id @default(autoincrement())
  blog_id   Int
  questions String @db.Text
  answers   String @db.Text
}

model inner_seo {
  page_id          Int    @id @default(autoincrement())
  page             String @db.VarChar(200)
  meta_title       String @db.VarChar(250)
  meta_description String @db.Text
  meta_keywords    String @db.Text
  header           String @db.VarChar(1000)
  footer           String @db.VarChar(1000)
}

model listing {
  id           Int       @id @default(autoincrement())
  userid       Int?
  user         users?    @relation(fields: [userid], references: [id])
  name         String    @db.VarChar(255)
  slug         String    @db.VarChar(255)
  category     category? @relation(fields: [category_id], references: [cid])
  category_id  Int?
  logo         String    @db.VarChar(255)
  website_link String    @db.VarChar(255)
  about        String    @db.Text
  email        String    @db.VarChar(255)
  number       String    @db.VarChar(255)
  address      String?   @db.VarChar(255)
  city         String?   @db.VarChar(255)
  pincode      String?   @db.VarChar(255)
  country      String?   @db.VarChar(255)
  date         String    @db.VarChar(30)
  verify_code  String?   @db.VarChar(10)
  claim        Int
  status       Int
  reviews      review[]
}

model review {
  id               Int            @id @default(autoincrement())
  user             users          @relation(fields: [user_id], references: [id])
  user_id          Int
  company          listing        @relation(fields: [company_id], references: [id])
  company_id       Int
  top_review       Boolean?       @default(false)
  review_title     String         @db.VarChar(50)
  review_comment   String         @db.VarChar(255)
  dateOfExperience String?
  review_rating    Int
  review_status    ReviewStatus?  @default(Moderation)
  review_date      DateTime       @default(now())
  flag             Boolean?       @default(false)
  flagDetail       flagDetails?
  reported         Boolean?       @default(false)
  reportDetail     ReportDetails?
}

enum ReviewStatus {
  Moderation
  Active
  Inactive
  Reported
  Flagged
}

model ReportDetails {
  id            Int      @id @default(autoincrement())
  review        review   @relation(fields: [review_id], references: [id])
  review_id     Int      @unique
  report_date   DateTime @default(now())
  report_reason String   @db.Text
}

model flagDetails {
  id          Int    @id @default(autoincrement())
  review      review @relation(fields: [reviewId], references: [id])
  reviewId    Int    @unique
  flag_reason String @db.Text
  flag_date   String @db.VarChar(20)
}

model settings {
  pid              Int    @id @default(autoincrement())
  popular_searches String @db.Text
  Date             String @db.VarChar(255)
  Footer_content   String @db.Text
}

model top_search {
  id      Int     @id @default(autoincrement())
  heading Int?
  content String? @db.Text
  date    String? @db.VarChar(255)
}

model users {
  id                Int          @id @default(autoincrement())
  firstName         String       @db.VarChar(50)
  lastName          String?      @db.VarChar(50)
  email             String       @db.VarChar(50)
  domain            String?      @db.VarChar(255)
  password          String?      @db.VarChar(250)
  cpassword         String?      @db.VarChar(250)
  image             String?      @db.VarChar(255)
  member_date       DateTime     @default(now())
  verify            Boolean      @default(false)
  verificationToken String?
  mobile_number     String?      @db.VarChar(15)
  userType          UserType     @default(USER)
  active            Boolean      @default(false)
  role              roles?       @relation(fields: [role_id], references: [id])
  role_id           Int?
  reviews           review[]
  listing           listing[]
  userDetails       UserDetails?
}

enum UserType {
  USER
  BUSINESS_USER
  ADMIN
}

model UserDetails {
  id          Int     @id @default(autoincrement())
  user        users?  @relation(fields: [user_id], references: [id])
  user_id     Int?    @unique
  website     String?
  companyName String?
  address     String?
  country     String?
  jobTitle    String?
  phone       String?
  image       String?
}

model business_users {
  id               Int     @id @default(autoincrement())
  firstName        String
  lastName         String?
  email            String
  website          String
  companyName      String
  address          String?
  country          String?
  verified         Boolean @default(false)
  jobTitle         String
  phone            String
  verificationCode String?
  accountType      String
  static_code      String?
  password         String?
  cpassword        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model roles {
  id          Int       @id @default(autoincrement())
  role_name   String    @db.VarChar(200)
  role_status Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  users       users[]
}
